<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript 模块</title>
    <url>/archives/3dcc1b8.html</url>
    <content><![CDATA[<p>现代 JavaScript 开发需要使用到很多的第三方的库，但是在 ES6 以前 JavaScript 并不支持 <code>module</code> 这一特性。解决这个问题的方案通常是把代码分成很多部分，再通过某些方式将它们连接起来。</p>
<a id="more"></a>

<h2 id="早期模块系统"><a href="#早期模块系统" class="headerlink" title="早期模块系统"></a>早期模块系统</h2><h3 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">    _count: <span class="number">0</span>,</span><br><span class="line">    m1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    m2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这样的写法缺点是会暴露内部状态，类似于 <code>module1._count</code> 这样的用法。</p>
<h3 id="立即执行函数写法"><a href="#立即执行函数写法" class="headerlink" title="立即执行函数写法"></a>立即执行函数写法</h3><p>使用立即执行函数（Immediately-Invoked Function Express, IIFE）写法可以不暴露私有成员的目的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _count = <span class="number">0</span></span><br><span class="line">    m1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    m2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        m1:m1,</span><br><span class="line">        m2:m2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>使用上面这个写法，外部代码访问不到内部的变量。</p>
<h2 id="ES6-前主流模块规范"><a href="#ES6-前主流模块规范" class="headerlink" title="ES6 前主流模块规范"></a>ES6 前主流模块规范</h2><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p>CommonJS 规范概述了同步声明依赖的模块定义。这个规范主要用于在服务器端实现模块化代码组织，但也可定义在浏览器中使用的模块依赖。需要注意的是 CommonJS 模块语法不能直接在浏览器中使用。</p>
<blockquote>
<p>Node.js 中使用了 CommonJS 规范。</p>
</blockquote>
<p>CommonJS 模块定义需要使用 <code>require()</code> 指定依赖，而使用 <code>exports</code> 对象定义自己的公共 API。下面的代码展示了简单的模块定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleB = <span class="built_in">require</span>(<span class="string">&#x27;./moduleB&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    stuff: moduleB.doStuff();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>moduleA 通过使用模块定义的相对路径来指定自己对 moduleB 的依赖。什么是「模块定义」以及如何将字符串解析为模块，完全取决于模块系统的实现。</p>
<p>请求模块会加载相应的模块，可以选择是否将模块赋值给变量。如果不赋值给变量，调用 require() 会把模块原封不动地加载进来。</p>
<p>无论一个模块在 require() 中被引用多少次，模块永远是单例的，看下面的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = <span class="built_in">require</span>(<span class="string">&#x27;./moduleA&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> a2 = <span class="built_in">require</span>(<span class="string">&#x27;./moduleA&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>在 CommonJS 中，模块加载是模块系统执行的<strong>同步操作</strong>,因此 require() 可以像下面的方式嵌入模块中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (loadCondition) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;./moduleA&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的 moduleA 只会在 <code>loadCondition</code> 为 <code>true</code> 时才会加载。这个加载是同步的，因此 <code>if</code> 之前所有的代码都会在加载 moduleA 之前执行，而 <code>if</code> 之后的代码都会在加载 moduleA 之后执行。同样，加载顺序规则也适用。如果之前已经加载过 moduleA 模块，之后再调用就只是暴露命名空间。</p>
<p>moduleA 在 <code>module.exports</code> 对象上定义自己的公共接口，即 <code>foo</code> 属性。如果有模块想使用该接口，可以如下操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleA = <span class="built_in">require</span>(<span class="string">&#x27;./moduleA&#x27;</span>)</span><br><span class="line">moduleA.foo</span><br></pre></td></tr></table></figure>

<p>即使一个模块没有任何公共的接口，如果应用程序请求了该模块，那么也会在加载的时候执行该模块体。</p>
<p>module.exports 对象非常灵活，有多种使用方式。如果只想导出一个实体，可以直接给 module.exports 赋值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">&#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>

<p>导出多个值也很常见，可以使用对象字面量赋值或每个属性赋一次值来实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    a: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    b: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.a = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="built_in">module</span>.exports.b = <span class="string">&#x27;B&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>上述两种定义风格是等价的。</p>
<p>模块的一个主要用途是托管类定义（这里使用 ES6 风格的类定义，不过 ES5 风格也兼容）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = A;</span><br><span class="line"><span class="keyword">var</span> A = <span class="built_in">require</span>(<span class="string">&#x27;./moduleA&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A();</span><br></pre></td></tr></table></figure>

<p>也可以将类实例作为导出值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> A();</span><br></pre></td></tr></table></figure>

<p>此外，CommonJS 也支持动态依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="keyword">var</span> A = <span class="built_in">require</span>(<span class="string">&#x27;./moduleA&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AMD-规范"><a href="#AMD-规范" class="headerlink" title="AMD 规范"></a>AMD 规范</h3><p>CommonJS 以服务器端为目标环境，能够一次性把所有模块都加载到内存，而异步模块定义（AMD, Asynchronous Module Definition）的模块定义系统则以浏览器为目标执行环境，这需要考虑网络延迟的问题。AMD 的一般策略是让模块声明自己的依赖，而运行在浏览器中的模块系统会按需获取依赖，并<br>在依赖加载完成后立即执行依赖它们的模块。</p>
<p>AMD 模块的核心是用函数包装模块定义，好处是可以防止声明全局变量，而且允许加载器库自行决定何时加载模块。包装模块的函数是全局 <code>define</code> 的参数，它是由 AMD 加载器库的实现定义的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ID 为 &#x27;moduleA&#x27; 的模块定义。moduleA 依赖 moduleB，</span></span><br><span class="line"><span class="comment">// moduleB 会异步加载</span></span><br><span class="line">define(<span class="string">&#x27;moduleA&#x27;</span>, [<span class="string">&#x27;moduleB&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">moduleB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        stuff: moduleB.doStuff();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="ES6-规范"><a href="#ES6-规范" class="headerlink" title="ES6 规范"></a>ES6 规范</h2><p>ES6 最大的改进就是引入了模块规范。有了 ES6 的模块规范，CommonJS 和 AMD规范都不再必要了。</p>
<h3 id="模块标签"><a href="#模块标签" class="headerlink" title="模块标签"></a>模块标签</h3><p>给 <code>script</code> 标签添加 <code>module</code> 属性，代表引入的 JavaScript 文件是作为一个模块执行，而不是作为传统的脚本执行。解析到 <code>&lt;script type=&quot;module&quot;&gt;</code> 标签后会立即下载该模块文件，但执行会延迟到文档解析完成。<code>&lt;script type=&quot;module&quot;&gt;</code> 在文件中的顺序就是他们执行的顺序，改变其位置只会影响文件加载时机，不会改变模块加载时机。</p>
<p>与 <code>&lt;script type=&quot;module&quot;&gt;</code> 模块标签相关联的模块被认为是入口模块。一个页面有多少入口模块没有限制，同一个模块被加载多少次也无限制。同一个模块在页面中无论被加载多少次，也不管用什么方式加载，只会加载一次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleA只会加载一次</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span> src=<span class="string">&quot;./moduleA.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span> src=<span class="string">&quot;./moduleA.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> <span class="string">&#x27;./moduleA.js&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> <span class="string">&#x27;./moduleA.js&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h3><p>ES6 模块的独特之处在于，既可以通过浏览器原生加载，也可以与第三方加载器和构建工具一起加载。部分浏览器没有原生支持 ES6 模块，因此可能还需要第三方工具。</p>
<p>完全支持 ES6 模块的浏览器可以从顶级模块加载整个依赖图，而且是异步完成的。浏览器首先解析入口模块，确定它们的依赖，并发送对依赖模块的请求。这些依赖模块返回后，浏览器解析这些依赖模块，确定它们的依赖，再对它们的依赖发送请求。直到所有的依赖都解析完成，应用程序正式加载模块。</p>
<h3 id="模块行为（特性）"><a href="#模块行为（特性）" class="headerlink" title="模块行为（特性）"></a>模块行为（特性）</h3><ul>
<li><p>模块代码只在加载后执行。</p>
</li>
<li><p>模块只能加载一次。</p>
</li>
<li><p>模块是单例的。</p>
</li>
<li><p>模块可以定义公共接口，其他模块可以基于这个公共接口观察和交互。</p>
</li>
<li><p>模块可以请求加载其他模块。</p>
</li>
<li><p>支持循环依赖。</p>
</li>
<li><p>ES6 模块默认在严格模式下执行。</p>
</li>
<li><p>ES6 模块不共享全局命名空间。</p>
</li>
<li><p>模块顶级 this 的值是 undefined。</p>
</li>
<li><p>模块中的 var 声明不会添加到 window 对象。</p>
</li>
<li><p>ES6 模块是异步加载和执行的。</p>
</li>
</ul>
<h3 id="模块导出"><a href="#模块导出" class="headerlink" title="模块导出"></a>模块导出</h3><p>export 有两种模块导出方式：命名式导出（名称导出）和默认导出（定义式导出），命名式导出每个模块可以多个，而默认导出每个模块仅一个。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; name1, name2, …, nameN &#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; variable1 <span class="keyword">as</span> name1, variable2 <span class="keyword">as</span> name2, …, nameN &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name1, name2, …, nameN; <span class="comment">// also var</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name1 = …, name2 = …, …, nameN; <span class="comment">// also var, const</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> expression;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">…</span>) </span>&#123; … &#125; <span class="comment">// also class, function*</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">name1</span>(<span class="params">…</span>) </span>&#123; … &#125; <span class="comment">// also class, function*</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1 <span class="keyword">as</span> <span class="keyword">default</span>, … &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> …;</span><br><span class="line"><span class="keyword">export</span> &#123; name1, name2, …, nameN &#125; <span class="keyword">from</span> …;</span><br><span class="line"><span class="keyword">export</span> &#123; import1 <span class="keyword">as</span> name1, import2 <span class="keyword">as</span> name2, …, nameN &#125; <span class="keyword">from</span> …;</span><br></pre></td></tr></table></figure>

<p>外部模块可以导入这个模块，而foo将成为这个导入模块的一个属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">&#x27;foo&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>变量声明和导出可以不在一行，在 export 子句中执行声明并将其导出到其他地方</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;;</span><br></pre></td></tr></table></figure>

<p>导出时也可以提供别名，别名必须在 export 子句的大括号语法中指定。因此，声明值、导出值和为导出值提供别名不能在一行完成。导入的模块可以使用 myFoo 来访问其导出的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> myFoo &#125;;</span><br></pre></td></tr></table></figure>

<p>考虑到导出多个值是常见的操作，ES6 模块也支持对导出声明分组，可以同时为部分或全部导出值指定别名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> baz = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar <span class="keyword">as</span> myBar, baz &#125;;</span><br></pre></td></tr></table></figure>

<p>默认导出（default export）就好像模块与被导出的值是一回事。默认导出使用 default 关键字将一个值声明为默认导出，每个模块只能有一个默认导出。重复的默认导出会导致 SyntaxError 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo;</span><br></pre></td></tr></table></figure>

<p>上段代码也可以写成这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> <span class="keyword">default</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h3><p>import 必须出现在模块的顶级</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许</span></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许</span></span><br><span class="line"><span class="keyword">if</span> (loadCondition) &#123;</span><br><span class="line">    <span class="keyword">import</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过 import 的相对位置并不重要，import 语句会被提升到模块顶部。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;./moduleA.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>花括号中的变量与后面模块中 export 的变量保持一致。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&quot;module&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&quot;module&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>也可以为导入的变量指定别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; foo <span class="keyword">as</span> myFoo &#125; <span class="keyword">from</span> <span class="string">&#x27;module&#x27;</span></span><br></pre></td></tr></table></figure>

<p>命名导出可以使用 * 批量获取并赋值给保存导出集合的别名，而无须列出每个标识符：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;foo&#x27;</span>, bar = <span class="string">&#x27;bar&#x27;</span>, baz = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar, baz &#125;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Foo <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(Foo.foo); <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(Foo.bar); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(Foo.baz); <span class="comment">// baz</span></span><br></pre></td></tr></table></figure>

<p>默认导出就好像整个模块就是导出的值一样。可以使用 default 关键字并提供别名来导入。也可以不使用大括号，此时指定的标识符就是默认导出的别名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等效</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> foo &#125; <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>如果模块同时导出了命名导出和默认导出，则可以在 import 语句中同时导入它们。可以依次列出特定导出的标识符来取得，也可以使用 * 来取得：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo, &#123; bar, baz &#125; <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> foo, bar, baz &#125; <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> foo, * <span class="keyword">as</span> Foo <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
</search>
